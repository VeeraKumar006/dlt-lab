# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YEB3m5hKQ8pdCCVDt5QImmtee5fFUa__
"""

import numpy as np

# --------------------------
# Activation functions
# --------------------------
def sigmoid(x):
    """Sigmoid activation function"""
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    """Derivative of sigmoid function"""
    return x * (1 - x)

# --------------------------
# Dataset (XOR problem)
# --------------------------
X = np.array([[0, 0],
              [0, 1],
              [1, 0],
              [1, 1]])

y = np.array([[0],
              [1],
              [1],
              [0]])

# --------------------------
# Initialize weights and biases
# --------------------------
np.random.seed(42)

# Input to hidden layer weights (2x2)
W1 = np.random.rand(2, 2)
b1 = np.random.rand(1, 2)

# Hidden to output layer weights (2x1)
W2 = np.random.rand(2, 1)
b2 = np.random.rand(1, 1)

# --------------------------
# Hyperparameters
# --------------------------
learning_rate = 0.5
epochs = 10000

# --------------------------
# Training loop
# --------------------------
for epoch in range(epochs):

    # ----- Forward propagation -----
    hidden_input = np.dot(X, W1) + b1      # Input to hidden layer
    hidden_output = sigmoid(hidden_input)  # Output from hidden layer

    final_input = np.dot(hidden_output, W2) + b2  # Input to output layer
    predicted_output = sigmoid(final_input)       # Output from network

    # ----- Compute loss (MSE) -----
    loss = np.mean((y - predicted_output) ** 2)

    # ----- Backpropagation -----
    # Output layer error
    error_output = y - predicted_output
    d_output = error_output * sigmoid_derivative(predicted_output)

    # Hidden layer error
    error_hidden = d_output.dot(W2.T)
    d_hidden = error_hidden * sigmoid_derivative(hidden_output)

    # ----- Update weights and biases -----
    W2 += hidden_output.T.dot(d_output) * learning_rate
    b2 += np.sum(d_output, axis=0, keepdims=True) * learning_rate

    W1 += X.T.dot(d_hidden) * learning_rate
    b1 += np.sum(d_hidden, axis=0, keepdims=True) * learning_rate

    # Print loss every 1000 epochs
    if epoch % 1000 == 0:
        print(f"Epoch {epoch}, Loss: {loss:.4f}")

# --------------------------
# Testing the model
# --------------------------
hidden_output = sigmoid(np.dot(X, W1) + b1)
predicted_output = sigmoid(np.dot(hidden_output, W2) + b2)

print("\nPredicted Output after Training:")
print(predicted_output)